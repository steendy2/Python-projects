{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO1Q51dcLgrbA0DEc1hj1vb",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/steendy2/Python-projects/blob/main/Gen_z%20protests\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m48ozR6Lj40O",
        "outputId": "ebf4fb70-f3f8-4abc-d5d2-3bf7767982e2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n",
            "Created /content/drive/My Drive/Colab Notebooks/Pydroid3Projects/protests.csv\n",
            "Setup complete! Ready to analyze Gen Z protests in Kenya.\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from datetime import datetime\n",
        "import os\n",
        "import re\n",
        "\n",
        "# Mount Google Drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# File paths\n",
        "DATA_FILE = '/content/drive/My Drive/Colab Notebooks/Pydroid3Projects/protests.csv'\n",
        "REPORT_FILE = '/content/drive/My Drive/Colab Notebooks/Pydroid3Projects/protests_report.txt'\n",
        "PLOT_FILE = '/content/drive/My Drive/Colab Notebooks/Pydroid3Projects/protests_viz.png'\n",
        "\n",
        "# Initialize CSV if it doesn't exist\n",
        "if not os.path.exists(DATA_FILE):\n",
        "    pd.DataFrame(columns=['date', 'event', 'deaths', 'location', 'description']).to_csv(DATA_FILE, index=False)\n",
        "    print(f\"Created {DATA_FILE}\")\n",
        "\n",
        "print(\"Setup complete! Ready to analyze Gen Z protests in Kenya.\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def fetch_protest_data():\n",
        "    \"\"\"Fetch and scrape Gen Z protests timeline from Wikipedia using Requests and BeautifulSoup.\"\"\"\n",
        "    url = \"https://en.wikipedia.org/wiki/Kenya_Finance_Bill_protests\"  # Primary source for 2024 events; 2025 from secondary\n",
        "    # Sample/Fallback data for 2024-2025 timeline (based on reliable sources)\n",
        "    sample_data = [\n",
        "        {'date': '2024-06-18', 'event': 'Protests begin against Finance Bill tax hikes; youth mobilize on TikTok/X.', 'deaths': 0, 'location': 'Nationwide', 'description': 'Initial demonstrations in Nairobi and other cities.'},\n",
        "        {'date': '2024-06-25', 'event': 'Storming of Parliament; largest protests in history; 60+ deaths from police gunfire.', 'deaths': 60, 'location': 'Nairobi', 'description': 'Protesters breach Parliament; Ruto withdraws bill.'},\n",
        "        {'date': '2024-07-07', 'event': 'Saba Saba Day clashes; 21 deaths amid anti-corruption demands.', 'deaths': 21, 'location': 'Nationwide', 'description': 'Commemorating 1950s resistance; abductions reported.'},\n",
        "        {'date': '2025-06-25', 'event': 'Anniversary protests; 16 deaths, 400 injuries; spreads to 27 counties.', 'deaths': 16, 'location': 'Nationwide', 'description': 'Marking 2024 Parliament storming; calls for systemic change.'},\n",
        "        {'date': '2025-07-07', 'event': 'Saba Saba 2025; ongoing demands for economic reforms.', 'deaths': 0, 'location': 'Nairobi', 'description': 'Focus on youth unemployment and police brutality.'}\n",
        "    ]\n",
        "    try:\n",
        "        response = requests.get(url)\n",
        "        response.raise_for_status()\n",
        "        soup = BeautifulSoup(response.text, 'html.parser')\n",
        "\n",
        "        # Extract timeline from 'Events' section (adapt based on page structure)\n",
        "        events_section = soup.find('h2', id='Events') or soup.find('h2', string=re.compile('Events', re.I))\n",
        "        if events_section:\n",
        "            timeline = []\n",
        "            for sibling in events_section.find_next_siblings():\n",
        "                if sibling.name == 'h3' or sibling.name == 'h4':\n",
        "                    break  # Stop at next major section\n",
        "                if sibling.name == 'ul':\n",
        "                    for li in sibling.find_all('li', recursive=False):\n",
        "                        date_match = re.search(r'(\\w+ \\d{1,2}, \\d{4})|(\\d{4}-\\d{2}-\\d{2})', li.text)\n",
        "                        date = date_match.group(0) if date_match else 'Unknown'\n",
        "                        event = li.text.strip()\n",
        "                        # Estimate deaths/location from text (simplified; in real app, use regex/NLP)\n",
        "                        deaths = len(re.findall(r'\\b(\\d{1,2})\\s*(deaths?|killed)\\b', event, re.I))\n",
        "                        location = re.search(r'Nairobi|Parliament|Kenya', event) or 'Nationwide'\n",
        "                        timeline.append({\n",
        "                            'date': date,\n",
        "                            'event': event[:200],  # Truncate for brevity\n",
        "                            'deaths': deaths,\n",
        "                            'location': location.group() if location else 'Nationwide',\n",
        "                            'description': event\n",
        "                        })\n",
        "        else:\n",
        "            timeline = []  # Fallback sample data for 2024-2025\n",
        "            print(\"Using sample data (Wikipedia structure may vary).\")\n",
        "\n",
        "\n",
        "        timeline = sample_data if not timeline else timeline\n",
        "\n",
        "        # Save to CSV (file handling)\n",
        "        df = pd.DataFrame(timeline)\n",
        "        df['date'] = pd.to_datetime(df['date'], errors='coerce')  # Convert to datetime\n",
        "        df.to_csv(DATA_FILE, index=False)\n",
        "        print(f\"Fetched {len(df)} events. Saved to {DATA_FILE}\")\n",
        "        return df\n",
        "    except Exception as e:\n",
        "        print(f\"Error fetching data: {e}. Using sample data.\")\n",
        "        sample_df = pd.DataFrame(sample_data)\n",
        "        sample_df['date'] = pd.to_datetime(sample_df['date'])\n",
        "        sample_df.to_csv(DATA_FILE, index=False)\n",
        "        return sample_df\n",
        "\n",
        "# Test fetch\n",
        "df = fetch_protest_data()\n",
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c9Nf-sAjkO1M",
        "outputId": "2446af41-31f1-4dae-c702-b8b0a257cc31"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error fetching data: 403 Client Error: Forbidden for url: https://en.wikipedia.org/wiki/Kenya_Finance_Bill_protests. Using sample data.\n",
            "        date                                              event  deaths  \\\n",
            "0 2024-06-18  Protests begin against Finance Bill tax hikes;...       0   \n",
            "1 2024-06-25  Storming of Parliament; largest protests in hi...      60   \n",
            "2 2024-07-07  Saba Saba Day clashes; 21 deaths amid anti-cor...      21   \n",
            "3 2025-06-25  Anniversary protests; 16 deaths, 400 injuries;...      16   \n",
            "4 2025-07-07  Saba Saba 2025; ongoing demands for economic r...       0   \n",
            "\n",
            "     location                                        description  \n",
            "0  Nationwide  Initial demonstrations in Nairobi and other ci...  \n",
            "1     Nairobi  Protesters breach Parliament; Ruto withdraws b...  \n",
            "2  Nationwide  Commemorating 1950s resistance; abductions rep...  \n",
            "3  Nationwide  Marking 2024 Parliament storming; calls for sy...  \n",
            "4     Nairobi  Focus on youth unemployment and police brutality.  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def analyze_protests(df):\n",
        "    \"\"\"Analyze protest trends with Pandas (deaths by year, event types).\"\"\"\n",
        "    if df.empty:\n",
        "        return {\"message\": \"No data to analyze.\"}\n",
        "\n",
        "    df['year'] = df['date'].dt.year\n",
        "    total_deaths = df['deaths'].sum()\n",
        "    deaths_by_year = df.groupby('year')['deaths'].sum()\n",
        "    events_by_location = df['location'].value_counts()\n",
        "    avg_deaths_per_event = df['deaths'].mean()\n",
        "\n",
        "    summary = {\n",
        "        'Total Events': len(df),\n",
        "        'Total Deaths': total_deaths,\n",
        "        'Average Deaths per Event': avg_deaths_per_event,\n",
        "        'Deaths by Year': deaths_by_year.to_dict(),\n",
        "        'Events by Location': events_by_location.to_dict()\n",
        "    }\n",
        "    return summary\n",
        "\n",
        "# Test analysis\n",
        "summary = analyze_protests(df)\n",
        "print(\"\\nProtest Analysis Summary:\")\n",
        "for key, value in summary.items():\n",
        "    print(f\"{key}: {value}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QYeHzjBxknd8",
        "outputId": "4a2132e5-c41f-4136-943c-54eeec6eddf6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Protest Analysis Summary:\n",
            "Total Events: 5\n",
            "Total Deaths: 97\n",
            "Average Deaths per Event: 19.4\n",
            "Deaths by Year: {2024: 81, 2025: 16}\n",
            "Events by Location: {'Nationwide': 3, 'Nairobi': 2}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def visualize_protests(df):\n",
        "    \"\"\"Visualize timeline and trends with Matplotlib/Seaborn.\"\"\"\n",
        "    if df.empty:\n",
        "        print(\"No data to visualize.\")\n",
        "        return\n",
        "\n",
        "    sns.set_style(\"whitegrid\")\n",
        "    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n",
        "\n",
        "    # Line Plot: Deaths Over Time\n",
        "    ax1.plot(df['date'], df['deaths'], marker='o', color='red', linewidth=2)\n",
        "    ax1.set_title('Deaths During Gen Z Protests (2024-2025)')\n",
        "    ax1.set_xlabel('Date')\n",
        "    ax1.set_ylabel('Deaths')\n",
        "    ax1.grid(True, alpha=0.3)\n",
        "    ax1.tick_params(axis='x', rotation=45)\n",
        "\n",
        "    # Bar Plot: Events by Location\n",
        "    events_by_location = df['location'].value_counts()\n",
        "    ax2.bar(events_by_location.index, events_by_location.values, color='skyblue')\n",
        "    ax2.set_title('Events by Location')\n",
        "    ax2.set_xlabel('Location')\n",
        "    ax2.set_ylabel('Number of Events')\n",
        "    ax2.tick_params(axis='x', rotation=45)\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(PLOT_FILE, dpi=150)\n",
        "    plt.show()\n",
        "    print(f\"Visualizations saved to {PLOT_FILE}\")\n",
        "\n",
        "# Test visualization\n",
        "visualize_protests(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 160
        },
        "id": "imykPJAqkuDf",
        "outputId": "64452e7e-fbac-422c-d924-9b4d96ecb63b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Visualizations saved to /content/drive/My Drive/Colab Notebooks/Pydroid3Projects/protests_viz.png\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def save_report(df, summary):\n",
        "    \"\"\"Save analysis report to TXT (file handling).\"\"\"\n",
        "    try:\n",
        "        with open(REPORT_FILE, 'w', encoding='utf-8') as file:\n",
        "            file.write(\"Gen Z Protests in Kenya: Analysis Report\\n\")\n",
        "            file.write(f\"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\\n\")\n",
        "            file.write(\"Overview:\\n\")\n",
        "            file.write(\"- Started June 2024 against Finance Bill tax hikes.\\n\")\n",
        "            file.write(\"- Youth-led (Gen Z), decentralized via social media.\\n\")\n",
        "            file.write(\"- Demands: Economic justice, anti-corruption, end police brutality.\\n\")\n",
        "            file.write(\"- 2025: Anniversary protests with renewed violence.\\n\\n\")\n",
        "            file.write(\"Summary Stats:\\n\")\n",
        "            for key, value in summary.items():\n",
        "                if isinstance(value, dict):\n",
        "                    file.write(f\"{key}:\\n\")\n",
        "                    for subkey, subvalue in value.items():\n",
        "                        file.write(f\"  {subkey}: {subvalue}\\n\")\n",
        "                else:\n",
        "                    file.write(f\"{key}: {value}\\n\")\n",
        "            file.write(\"\\nFull Timeline:\\n\")\n",
        "            file.write(df.to_string(index=False))\n",
        "        print(f\"Report saved to {REPORT_FILE}\")\n",
        "    except Exception as e:\n",
        "        print(f\"Error saving: {e}\")\n",
        "\n",
        "# Test report\n",
        "save_report(df, summary)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y7wyb1H_k07f",
        "outputId": "5af06893-8cb5-4695-ccc4-b4de00631e78"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Report saved to /content/drive/My Drive/Colab Notebooks/Pydroid3Projects/protests_report.txt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def main_menu():\n",
        "    \"\"\"CLI interface for the Gen Z Protests Analyzer.\"\"\"\n",
        "    df = pd.read_csv(DATA_FILE)  # Load existing data\n",
        "    df['date'] = pd.to_datetime(df['date'], errors='coerce')\n",
        "\n",
        "    while True:\n",
        "        print(\"\\n--- Gen Z Protests Analyzer (Kenya 2024-2025) ---\")\n",
        "        print(\"1. Fetch/Update Protest Data\")\n",
        "        print(\"2. Analyze Trends\")\n",
        "        print(\"3. Visualize Timeline\")\n",
        "        print(\"4. Generate Report\")\n",
        "        print(\"5. View Data\")\n",
        "        print(\"6. Exit\")\n",
        "\n",
        "        choice = input(\"Enter choice (1-6): \").strip()\n",
        "\n",
        "        if choice == '1':\n",
        "            df = fetch_protest_data()\n",
        "\n",
        "        elif choice == '2':\n",
        "            summary = analyze_protests(df)\n",
        "            if 'message' in summary:\n",
        "                print(summary['message'])\n",
        "            else:\n",
        "                print(\"\\nAnalysis Summary:\")\n",
        "                for key, value in summary.items():\n",
        "                    if isinstance(value, dict):\n",
        "                        print(f\"{key}:\")\n",
        "                        for subkey, subvalue in value.items():\n",
        "                            print(f\"  {subkey}: {subvalue}\")\n",
        "                    else:\n",
        "                        print(f\"{key}: {value}\")\n",
        "\n",
        "        elif choice == '3':\n",
        "            visualize_protests(df)\n",
        "\n",
        "        elif choice == '4':\n",
        "            summary = analyze_protests(df)\n",
        "            if 'message' not in summary:\n",
        "                save_report(df, summary)\n",
        "\n",
        "        elif choice == '5':\n",
        "            print(\"\\nProtest Timeline:\")\n",
        "            print(df.to_string(index=False))\n",
        "\n",
        "        elif choice == '6':\n",
        "            print(\"Exiting. Thanks for exploring Kenya's Gen Z protests!\")\n",
        "            break\n",
        "        else:\n",
        "            print(\"Invalid choice. Try again.\")\n",
        "\n",
        "main_menu()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3rux09QOk7eU",
        "outputId": "9827d9e7-82e9-4ed3-ce8e-8becaa004d47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Gen Z Protests Analyzer (Kenya 2024-2025) ---\n",
            "1. Fetch/Update Protest Data\n",
            "2. Analyze Trends\n",
            "3. Visualize Timeline\n",
            "4. Generate Report\n",
            "5. View Data\n",
            "6. Exit\n",
            "Enter choice (1-6): 4\n",
            "Report saved to /content/drive/My Drive/Colab Notebooks/Pydroid3Projects/protests_report.txt\n",
            "\n",
            "--- Gen Z Protests Analyzer (Kenya 2024-2025) ---\n",
            "1. Fetch/Update Protest Data\n",
            "2. Analyze Trends\n",
            "3. Visualize Timeline\n",
            "4. Generate Report\n",
            "5. View Data\n",
            "6. Exit\n",
            "Enter choice (1-6): 5\n",
            "\n",
            "Protest Timeline:\n",
            "      date                                                                                event  deaths   location                                                  description  year\n",
            "2024-06-18           Protests begin against Finance Bill tax hikes; youth mobilize on TikTok/X.       0 Nationwide          Initial demonstrations in Nairobi and other cities.  2024\n",
            "2024-06-25 Storming of Parliament; largest protests in history; 60+ deaths from police gunfire.      60    Nairobi           Protesters breach Parliament; Ruto withdraws bill.  2024\n",
            "2024-07-07                       Saba Saba Day clashes; 21 deaths amid anti-corruption demands.      21 Nationwide         Commemorating 1950s resistance; abductions reported.  2024\n",
            "2025-06-25               Anniversary protests; 16 deaths, 400 injuries; spreads to 27 counties.      16 Nationwide Marking 2024 Parliament storming; calls for systemic change.  2025\n",
            "2025-07-07                                Saba Saba 2025; ongoing demands for economic reforms.       0    Nairobi            Focus on youth unemployment and police brutality.  2025\n",
            "\n",
            "--- Gen Z Protests Analyzer (Kenya 2024-2025) ---\n",
            "1. Fetch/Update Protest Data\n",
            "2. Analyze Trends\n",
            "3. Visualize Timeline\n",
            "4. Generate Report\n",
            "5. View Data\n",
            "6. Exit\n",
            "Enter choice (1-6): 6\n",
            "Exiting. Thanks for exploring Kenya's Gen Z protests!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install textblob\n",
        "from textblob import TextBlob\n",
        "def analyze_sentiment(df):\n",
        "    df['sentiment'] = df['description'].apply(lambda x: TextBlob(x).sentiment.polarity)\n",
        "    return df['sentiment'].mean()  # Overall sentiment score (-1 negative to 1 positive)\n",
        "# Add to menu option 2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T6tbgQHIl2Ql",
        "outputId": "65ef65ce-24f7-41ce-947b-8e0f4928086b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: textblob in /usr/local/lib/python3.12/dist-packages (0.19.0)\n",
            "Requirement already satisfied: nltk>=3.9 in /usr/local/lib/python3.12/dist-packages (from textblob) (3.9.1)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.12/dist-packages (from nltk>=3.9->textblob) (8.2.1)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.12/dist-packages (from nltk>=3.9->textblob) (1.5.2)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.12/dist-packages (from nltk>=3.9->textblob) (2024.11.6)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.12/dist-packages (from nltk>=3.9->textblob) (4.67.1)\n"
          ]
        }
      ]
    }
  ]
}